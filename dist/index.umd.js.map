{"version":3,"file":"index.umd.js","sources":["../src/index.js"],"sourcesContent":["import { useState, useEffect, useReducer, useRef } from 'react';\n\nexport const encryptData = async (data, encrypted, keys, sea) => {\n  return encrypted ? sea.encrypt(data, keys) : Promise.resolve(data);\n};\n\nexport const decryptData = async (data, encrypted, keys, sea) => {\n  return encrypted ? sea.decrypt(data, keys) : Promise.resolve(data);\n};\n\nconst debouncedUpdates = (dispatcher, timeout = 100) => {\n  let actions = [];\n  let handler;\n  return (action) => {\n    actions.push(action);\n    if (!handler) {\n      handler = setTimeout(() => {\n        let newStateSlice = actions.reduce((previousState, { id, data }) => {\n          previousState[id] = data;\n          return previousState;\n        }, {});\n        dispatcher(newStateSlice);\n        actions = [];\n        handler = null;\n      }, timeout);\n    }\n\n    return () => {\n      clearTimeout(handler);\n      actions = [];\n      handler = null;\n    };\n  };\n};\n\nconst reducer = (state, { data, type }) => {\n  switch (type) {\n    case 'add':\n      return { ...state, ...data };\n    case 'update':\n      return { ...state, [data.nodeID]: data };\n    case 'remove':\n      delete state[data];\n      return { ...state };\n    default:\n      throw new Error();\n  }\n};\n\nconst useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => (isMounted.current = false);\n  }, []);\n  return isMounted;\n};\n\nconst useSafeReducer = (reducer, initialState) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const isMounted = useIsMounted();\n\n  function safeDispatch(args) {\n    if (isMounted.current) {\n      dispatch(args);\n    }\n  }\n\n  return [state, safeDispatch];\n};\n\nexport const useGun = (Gun, peerList) => {\n  const [gun] = useState(\n    Gun({\n      peers: peerList,\n    })\n  );\n\n  return [gun];\n};\n\nexport const useGunNamespace = (gun) => {\n  const [namespace, setNamespace] = useState(null);\n  if (!namespace) {\n    setNamespace(gun.user());\n  }\n  return [namespace];\n};\n\nexport const useGunKeyAuth = (gun, keys, triggerAuth = true) => {\n  // Will attempt to perform a login (when triggerAuth is set to true),\n  // or, if false, returns a namespaced gun node\n  const [namespacedGraph] = useGunNamespace(gun);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  gun.on('auth', () => {\n    setIsLoggedIn(true);\n  });\n\n  useEffect(() => {\n    if (namespacedGraph && !namespacedGraph.is && keys && triggerAuth) {\n      namespacedGraph.auth(keys);\n    }\n  }, [triggerAuth, namespacedGraph, keys]);\n\n  return [namespacedGraph, isLoggedIn];\n};\n\nexport const useGunKeys = (sea, initialValue) => {\n  const [keys, setKeys] = useState(initialValue);\n\n  async function getKeySet() {\n    const pair = await sea.pair();\n    setKeys(pair);\n  }\n\n  if (!keys) {\n    getKeySet();\n  }\n\n  return [keys, setKeys];\n};\n\nexport const useGunState = (\n  ref,\n  { appKeys, sea, interval = 100, encrypted = true }\n) => {\n  const [gunAppGraph] = useState(ref);\n  const [fields, dispatch] = useSafeReducer(reducer, {});\n  const handler = useRef(null);\n  const isMounted = useIsMounted();\n\n  useEffect(() => {\n    const debouncedHandlers = [];\n    if (isMounted.current) {\n      const updater = debouncedUpdates((data) => {\n        dispatch({ type: 'add', data });\n      }, interval);\n\n      gunAppGraph.on(async (encryptedField, nodeID, message, event) => {\n        let decryptedField = await decryptData(\n          encryptedField,\n          encrypted,\n          appKeys,\n          sea\n        );\n        Object.keys(decryptedField).forEach((key) => {\n          let cleanFn = updater({ id: key, data: decryptedField[key] });\n          debouncedHandlers.push(cleanFn);\n        });\n\n        if (!handler.current) {\n          handler.current = event;\n        }\n      });\n    }\n\n    return () => {\n      if (handler.current) {\n        //cleanup gun .on listener\n        handler.current.off();\n      }\n      if (debouncedHandlers.length) {\n        //cleanup timeouts\n        debouncedHandlers.forEach((c) => c());\n      }\n    };\n    // We just need to set the listener once\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Working with root node fields\n  const put = async (data) => {\n    let encryptedData = await encryptData(data, encrypted, appKeys, sea);\n    await gunAppGraph.put(encryptedData);\n  };\n\n  const remove = async (field) => {\n    await gunAppGraph.put(null);\n    dispatch({ type: 'remove', data: field });\n  };\n\n  return [\n    fields,\n    { put, remove },\n    gunAppGraph, // the actual graph is sent in case something advanced needs to be done\n  ];\n};\n\nexport const useGunCollectionState = (\n  ref,\n  { appKeys, sea, interval = 100, encrypted = true }\n) => {\n  const [gunAppGraph] = useState(ref);\n  const [collection, dispatch] = useSafeReducer(reducer, {});\n  const handler = useRef(null);\n  const isMounted = useIsMounted();\n\n  // Working with Sets\n  useEffect(() => {\n    const debouncedHandlers = [];\n    if (isMounted.current) {\n      const updater = debouncedUpdates((data) => {\n        dispatch({ type: 'add', data });\n      }, interval);\n\n      gunAppGraph.map().on(async (encryptedNode, nodeID, message, event) => {\n        let item = await decryptData(encryptedNode, encrypted, appKeys, sea);\n        if (item) {\n          let cleanFn = updater({\n            id: nodeID,\n            data: { ...item, nodeID },\n          });\n          debouncedHandlers.push(cleanFn);\n        }\n\n        if (!handler.current) {\n          handler.current = event;\n        }\n      });\n    }\n\n    return () => {\n      if (handler.current) {\n        //cleanup gun .on listener\n        handler.current.off();\n      }\n      if (debouncedHandlers.length) {\n        //cleanup timeouts\n        debouncedHandlers.forEach((c) => c());\n      }\n    };\n    // We just need to set the listener once\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const updateInSet = async (nodeID, data) => {\n    let encryptedData = await encryptData(data, encrypted, appKeys, sea);\n    await gunAppGraph.get(nodeID).put(encryptedData);\n    dispatch({ type: 'update', data: { nodeID, ...data } });\n  };\n\n  const addToSet = async (data) => {\n    let encryptedData = await encryptData(data, encrypted, appKeys, sea);\n    await gunAppGraph.set(encryptedData);\n  };\n\n  const removeFromSet = async (nodeID) => {\n    await gunAppGraph.get(nodeID).put(null);\n    dispatch({ type: 'remove', data: nodeID });\n  };\n\n  return [\n    collection,\n    { addToSet, updateInSet, removeFromSet },\n    gunAppGraph, // the actual graph is sent in case something advanced needs to be done\n  ];\n};\n"],"names":["encryptData","data","encrypted","keys","sea","encrypt","decryptData","decrypt","debouncedUpdates","dispatcher","timeout","handler","actions","action","push","setTimeout","newStateSlice","reduce","previousState","clearTimeout","reducer","state","Object","nodeID","Error","useIsMounted","isMounted","useRef","useEffect","current","useSafeReducer","initialState","useReducer","args","dispatch","useGunNamespace","gun","useState","namespace","setNamespace","user","Gun","peerList","peers","triggerAuth","on","setIsLoggedIn","namespacedGraph","is","auth","isLoggedIn","initialValue","pair","setKeys","getKeySet","ref","debouncedHandlers","updater","type","interval","gunAppGraph","encryptedField","message","event","appKeys","decryptedField","forEach","key","cleanFn","id","off","length","c","fields","encryptedData","put","field","map","encryptedNode","item","collection","set","get"],"mappings":"4NAEaA,WAAqBC,EAAMC,EAAWC,EAAMC,8BAChDF,EAAYE,EAAIC,QAAQJ,EAAME,GAAwBF,uCAGlDK,WAAqBL,EAAMC,EAAWC,EAAMC,8BAChDF,EAAYE,EAAIG,QAAQN,EAAME,GAAwBF,uCAGzDO,WAAoBC,EAAYC,kBAAU,SAE1CC,EADAC,EAAU,mBAENC,UACND,EAAQE,KAAKD,GACRF,IACHA,EAAUI,0BACJC,EAAgBJ,EAAQK,gBAAQC,YAClCA,eACOA,GACN,IACHT,EAAWO,GACXJ,EAAU,GACVD,EAAU,MACTD,eAIHS,aAAaR,GACbC,EAAU,GACVD,EAAU,QAKVS,WAAWC,uCAER,aACIC,iBAAKD,EAAUpB,OACnB,gBACIqB,iBAAKD,UAAQpB,EAAKsB,QAAStB,UAC/B,uBACIoB,EAAMpB,GACNqB,iBAAKD,iBAEN,IAAIG,QAIVC,iBACEC,EAAYC,UAAO,UACzBC,8BACEF,EAAUG,SAAU,oBACNH,EAAUG,SAAU,IACjC,IACIH,GAGHI,WAAkBV,EAASW,SACLC,aAAWZ,EAASW,iBACxCL,EAAYD,UAQX,CAACJ,WANcY,GAChBP,EAAUG,SACZK,EAASD,MAiBFE,WAAmBC,SACIC,WAAS,oBACtCC,IACHC,QAAaH,EAAII,QAEZ,CAACF,sDAfaG,EAAKC,SAOnB,CANOL,WACZI,EAAI,CACFE,MAAOD,uDAeiBN,EAAKjC,EAAMyC,mBAAc,SAG3BT,EAAgBC,QACNC,YAAS,wBAE7CD,EAAIS,GAAG,kBACLC,GAAc,KAGhBlB,uBACMmB,IAAoBA,EAAgBC,IAAM7C,GAAQyC,GACpDG,EAAgBE,KAAK9C,IAEtB,CAACyC,EAAaG,EAAiB5C,IAE3B,CAAC4C,EAAiBG,0BAGA9C,EAAK+C,SACNd,WAASc,wBAO5BhD,kCAJgBC,EAAIgD,sBAAjBA,GACNC,EAAQD,wCAIRE,GAGK,CAACnD,EAAMkD,2BAIdE,yDAC2B,uCAAiB,SAEtBlB,WAASkB,QACJzB,EAAeV,EAAS,kBAC7CT,EAAUgB,SAAO,MACjBD,EAAYD,WAElBG,2BACQ4B,EAAoB,MACtB9B,EAAUG,QAAS,KACf4B,EAAUjD,WAAkBP,GAChCiC,EAAS,CAAEwB,KAAM,WAAOzD,KACvB0D,GAEHC,EAAYf,YAAUgB,EAAgBtC,EAAQuC,EAASC,8BAC1BzD,EACzBuD,EACA3D,EACA8D,EACA5D,kBAJE6D,GAMJ3C,OAAOnB,KAAK8D,GAAgBC,iBAASC,OAC/BC,EAAUX,EAAQ,CAAEY,GAAIF,EAAKlE,KAAMgE,EAAeE,KACtDX,EAAkB1C,KAAKsD,KAGpBzD,EAAQkB,UACXlB,EAAQkB,QAAUkC,4DAMlBpD,EAAQkB,SAEVlB,EAAQkB,QAAQyC,MAEdd,EAAkBe,QAEpBf,EAAkBU,iBAASM,UAAMA,QAKpC,IAaI,CACLC,EACA,cAZiBxE,8BACSD,EAAYC,EAAMC,EAAW8D,EAAS5D,kBAA5DsE,0BACEd,EAAYe,IAAID,6EAGFE,8BACdhB,EAAYe,IAAI,uBACtBzC,EAAS,CAAEwB,KAAM,SAAUzD,KAAM2E,2CAMjChB,qCAKFL,yDAC2B,uCAAiB,SAEtBlB,WAASkB,QACAzB,EAAeV,EAAS,kBACjDT,EAAUgB,SAAO,MACjBD,EAAYD,WAGlBG,2BACQ4B,EAAoB,MACtB9B,EAAUG,QAAS,KACf4B,EAAUjD,WAAkBP,GAChCiC,EAAS,CAAEwB,KAAM,WAAOzD,KACvB0D,GAEHC,EAAYiB,MAAMhC,YAAUiC,EAAevD,EAAQuC,EAASC,8BACzCzD,EAAYwE,EAAe5E,EAAW8D,EAAS5D,kBAA5D2E,MACAA,EAAM,KACJX,EAAUX,EAAQ,CACpBY,GAAI9C,EACJtB,KAAMqB,iBAAKyD,UAAMxD,MAEnBiC,EAAkB1C,KAAKsD,GAGpBzD,EAAQkB,UACXlB,EAAQkB,QAAUkC,4DAMlBpD,EAAQkB,SAEVlB,EAAQkB,QAAQyC,MAEdd,EAAkBe,QAEpBf,EAAkBU,iBAASM,UAAMA,QAKpC,IAkBI,CACLQ,EACA,mBAZsB/E,8BACID,EAAYC,EAAMC,EAAW8D,EAAS5D,kBAA5DsE,0BACEd,EAAYqB,IAAIP,kFARGnD,EAAQtB,8BACPD,EAAYC,EAAMC,EAAW8D,EAAS5D,kBAA5DsE,0BACEd,EAAYsB,IAAI3D,GAAQoD,IAAID,oBAClCxC,EAAS,CAAEwB,KAAM,SAAUzD,KAAMqB,yBAAEC,GAAWtB,oEAQnBsB,8BACrBqC,EAAYsB,IAAI3D,GAAQoD,IAAI,uBAClCzC,EAAS,CAAEwB,KAAM,SAAUzD,KAAMsB,2CAMjCqC"}